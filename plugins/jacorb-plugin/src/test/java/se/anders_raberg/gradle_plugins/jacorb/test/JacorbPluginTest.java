/*
 * This source file was generated by the Gradle 'init' task
 */
package se.anders_raberg.gradle_plugins.jacorb.test;

import static org.gradle.api.plugins.BasePlugin.CLEAN_TASK_NAME;
import static org.gradle.testkit.runner.TaskOutcome.FROM_CACHE;
import static org.gradle.testkit.runner.TaskOutcome.SUCCESS;
import static org.gradle.testkit.runner.TaskOutcome.UP_TO_DATE;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static se.anders_raberg.gradle_plugins.jacorb.JacorbPlugin.JACORB_COMPILE_TASK_NAME;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import org.gradle.api.Project;
import org.gradle.testfixtures.ProjectBuilder;
import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.TaskOutcome;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.io.CleanupMode;
import org.junit.jupiter.api.io.TempDir;

@TestMethodOrder(OrderAnnotation.class)
class JacorbPluginTest {
    private static final String JACORB_PLUGIN_ID = "jacorb";

    @TempDir(cleanup = CleanupMode.ON_SUCCESS)
    private static Path buildTempDir;

    @BeforeAll
    static void setupProject() throws IOException {
        Path idlDirA = buildTempDir.resolve("a");
        Path idlDirB = buildTempDir.resolve("b");

        Files.writeString(buildTempDir.resolve("build.gradle"), """
                plugins {
                    id 'java'
                    id 'jacorb'
                }


                repositories {
                    mavenCentral()
                }

                jacorb {
                    idlDirs = files("%s", "%s")
                }
                """.formatted(idlDirA, idlDirB));

        Files.createDirectories(idlDirA);
        Files.writeString(idlDirA.resolve("a.idl"), """
                interface Alpha {
                };
                """);

        Files.createDirectories(idlDirB);
        Files.writeString(idlDirB.resolve("b.idl"), """
                interface Bravo {
                };
                """);

    }

    @Test
    @Order(4)
    void pluginRegistersATask() {
        Project project = ProjectBuilder.builder().build();
        project.getPlugins().apply(JACORB_PLUGIN_ID);
        assertNotNull(project.getTasks().findByName(JACORB_COMPILE_TASK_NAME));
    }

    @Test
    @Order(1)
    void runCleanNoCache() {
        run(List.of(CLEAN_TASK_NAME, JACORB_COMPILE_TASK_NAME), SUCCESS);
    }

    @Test
    @Order(2)
    void runUpToDate() {
        run(List.of(JACORB_COMPILE_TASK_NAME), UP_TO_DATE);
    }

    @Test
    @Order(3)
    void runCleanWithCache() {
        run(List.of(CLEAN_TASK_NAME, JACORB_COMPILE_TASK_NAME), FROM_CACHE);
    }

    void run(List<String> tasks, TaskOutcome expectedOutcome) {
        List<String> tmpTasks = new ArrayList<>(tasks);
        tmpTasks.addAll(List.of("--configuration-cache", "--build-cache", "--gradle-user-home",
                buildTempDir.resolve("gradle-home").toString()));

        BuildResult result = GradleRunner.create() //
                .withProjectDir(buildTempDir.toFile()) //
                .withPluginClasspath() //
                .withArguments(tmpTasks) //
                .build();

        assertEquals(expectedOutcome, result.task(":" + JACORB_COMPILE_TASK_NAME).getOutcome());
    }

}
